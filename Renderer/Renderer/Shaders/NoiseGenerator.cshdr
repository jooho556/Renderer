#version 440 core

uniform int table_size;
uniform int noise_side_length;

//grid_size_length
layout(local_size_x = 2, local_size_y = 2, local_size_z = 2) in;

layout(std430, binding = 0) buffer Texture
{
    float voxel[];
};

layout(std430, binding = 1) buffer Gradients
{
    vec4 gradients[];
};

layout(std430, binding = 2) buffer PTable
{
    uint permutation_table[];
};

vec3 GetPoint(float x, float y, float z)
{
    uint grid_side_length = noise_side_length / table_size;
    return vec3(x / grid_side_length, y / grid_side_length, z / grid_side_length);
}

uint Hash(uint x, uint y, uint z)
{
    return permutation_table[(permutation_table[(permutation_table[x] + y) % table_size] + z) % table_size];
}

float GetPerlinNoise(vec3 p)
{
    //Eight corners
    int xi0 = int(floor(p.x));
    int yi0 = int(floor(p.y));
    int zi0 = int(floor(p.z));
    int xi1 = (xi0 + 1);
    int yi1 = (yi0 + 1);
    int zi1 = (zi0 + 1);

    //Fractional part of local grid
    float tx = p.x - floor(p.x);
    float ty = p.y - floor(p.y);
    float tz = p.z - floor(p.z);

    float t1 = smoothstep(0., 1., tx);
    float t2 = smoothstep(0., 1., ty);
    float t3 = smoothstep(0., 1., tz);

    //Gradients vectors
    vec3 g_bll = gradients[Hash(xi0, yi0, zi0)].xyz;
    vec3 g_brl = gradients[Hash(xi1, yi0, zi0)].xyz;
    vec3 g_trl = gradients[Hash(xi1, yi1, zi0)].xyz;
    vec3 g_tll = gradients[Hash(xi0, yi1, zi0)].xyz;
    vec3 g_blu = gradients[Hash(xi0, yi0, zi1)].xyz;
    vec3 g_bru = gradients[Hash(xi1, yi0, zi1)].xyz;
    vec3 g_tru = gradients[Hash(xi1, yi1, zi1)].xyz;
    vec3 g_tlu = gradients[Hash(xi0, yi1, zi1)].xyz;

    //Vectors from corners to current pos
    float x0 = tx;
    float x1 = tx - 1;
    float y0 = ty;
    float y1 = ty - 1;
    float z0 = tz;
    float z1 = tz - 1;

    vec3 p_bll = vec3(x0, y0, z0);
    vec3 p_brl = vec3(x1, y0, z0);
    vec3 p_trl = vec3(x1, y1, z0);
    vec3 p_tll = vec3(x0, y1, z0);
    vec3 p_blu = vec3(x0, y0, z1);
    vec3 p_bru = vec3(x1, y0, z1);
    vec3 p_tru = vec3(x1, y1, z1);
    vec3 p_tlu = vec3(x0, y1, z1);

    //Dot product
    float bll = dot(g_bll, p_bll);
    bll = (bll + 1.) / 2.;
    float brl = dot(g_brl, p_brl);
    brl = (brl + 1.) / 2.;
    float trl = dot(g_trl, p_trl);
    trl = (trl + 1.) / 2.;
    float tll = dot(g_tll, p_tll);
    tll = (tll + 1.) / 2.;
    float blu = dot(g_blu, p_blu);
    blu = (blu + 1.) / 2.;
    float bru = dot(g_bru, p_bru);
    bru = (bru + 1.) / 2.;
    float tru = dot(g_tru, p_tru);
    tru = (tru + 1.) / 2.;
    float tlu = dot(g_tlu, p_tlu);
    tlu = (tlu + 1.) / 2.;

    //Trilinear interpolation
    float bl = mix(bll, brl, t1);
    float tl = mix(tll, trl, t1);
    float l = mix(bl, tl, t2);

    float bu = mix(blu, bru, t1);
    float tu = mix(tlu, tru, t1);
    float u = mix(bu, tu, t2);

    return mix(l, u, t3);
}

float FractalSum(vec3 p, int layer_num)
{
    float n = 0.;
    for(int i = 0; i < layer_num; ++i)
    {
        n += GetPerlinNoise(p);
        p /= 2.;
    }
    return n / layer_num;
}

void main()
{
    vec3 id = gl_GlobalInvocationID;
    int index = int(noise_side_length * noise_side_length * id.z + 
        noise_side_length * id.y + id.x);
    float n  = FractalSum(GetPoint(id.x, id.y, id.z), 1);
    voxel[index] = n;//pow(n, 5) * 10;
}